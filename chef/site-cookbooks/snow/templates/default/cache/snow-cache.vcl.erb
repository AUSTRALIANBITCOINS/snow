import std;

backend default {
    .host = "<%= @reverse_ip %>";
    .port = "<%= node['snow']['reverse']['https_port'] %>";
}

acl purge {
    "localhost";
    "10.0.0.0"/16;
}

sub vcl_hash {
    hash_data(req.url);

    if (req.http.host) {
        hash_data(req.http.host);
    } else {
        hash_data(server.ip);
    }

    if (req.http.Cookie) {
        hash_data(req.http.Cookie);
    }

    return (hash);
}

sub vcl_recv {
    # The only cookie is used is session
    if (req.http.Cookie ~ ";? *session=") {
        set req.http.Cookie =
            regsub(req.http.Cookie, ".*;? *(session=[a-z0-9]+).*", "\1");
    }

    # Normalize accept-encoding, from https://www.varnish-cache.org/trac/wiki/VCLExampleNormalizeAcceptEncoding
    if (req.http.Accept-Encoding) {
        if (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding = "gzip";
        } elsif (req.http.Accept-Encoding ~ "deflate") {
            set req.http.Accept-Encoding = "deflate";
        } else {
            # unkown algorithm
            remove req.http.Accept-Encoding;
        }
    }

    # Normalize Accept-Encoding header
    # straight from the manual: https://www.varnish-cache.org/docs/3.0/tutorial/vary.html
    if (req.http.Accept-Encoding) {
        if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg)$") {
            # No point in compressing these
            remove req.http.Accept-Encoding;
        } elsif (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding = "gzip";
        } elsif (req.http.Accept-Encoding ~ "deflate") {
            set req.http.Accept-Encoding = "deflate";
        } else {
            # unkown algorithm
            remove req.http.Accept-Encoding;
        }
    }

    if (req.request == "PURGE") {
        if (!client.ip ~ purge) {
            error 405 "Not allowed.";
        }
        return (lookup);
    }

    if (!req.request ~ "^(GET|POST|DELETE|PATCH|PUT)$") {
        error 405 "Not allowed.";
    }

    # Strip hash, server doesn't need it.
    if (req.url ~ "\#") {
        set req.url = regsub(req.url, "\#.*$", "");
    }

    # Strip a trailing ? if it exists
    if (req.url ~ "\?$") {
        set req.url = regsub(req.url, "\?$", "");
    }

    # Strip attempts to force caching
    if (req.url ~ "\?(ts=)?\d+$") {
        set req.url = regsub(req.url, "(.+)\?(ts=)?\d+$", "\1");
    }

    # Force lookup for user invariants
    if (req.url ~ "^/api/v1/currencies$" ||
        req.url ~ "^/api/ripple/federation$" ||
        req.url ~ "^/api/v1/ripple/trust/" ||
        req.url ~ "^/api/v1/ripple/account" ||
        req.url ~ "^/api/v1/ripple/address" ||
        req.url ~ "^/api/v1/markets/?" ||
        req.url ~ "\.(png|jpg|txt|css|js|ico)$" ||
        req.url ~ "^/(admin|client)?$")
    {
        # Remove query parameters
        set req.url = regsub(req.url, "\?.*$", "");
        set req.http.X-Varnish-Public = "true";
    } else {
        unset req.http.X-Varnish-Public;
	}

    if (req.request != "GET" && req.request != "HEAD") {
        # We only deal with GET and HEAD by default
        return (pass);
    }

    return (lookup);
}

sub vcl_fetch {
    set beresp.ttl = 0s;

    # Strip cookies from user invariant queries
    if (req.http.X-Varnish-Public == "true")
    {
        unset beresp.http.set-cookie;
    }

    if (req.url ~ "^/(client|admin)?$") {
        set beresp.ttl = 10m;
    }

    # Static resources
    if (req.url ~ "\.(png|jpg|txt|css|js|ico)$") {
        set beresp.ttl = 10m;
        unset beresp.http.set-cookie;
    }

    # Cache market stats
    if (req.url ~ "^/api/v1/markets/?$" ||
        req.url ~ "^/api/bitcoincharts")
    {
        set beresp.ttl = 5m;
    }

    # Cache bootstrapping info that rarely changes
    if (req.url ~ "^/api/v1/currencies" ||
        req.url ~ "^/api/v1/ripple/account/" ||
        req.url ~ "^/api/v1/ripple/address" ||
        req.url ~ "^/api/v1/intercom" ||
        req.url ~ "^/api/v1/language" ||
        req.url ~ "^/api/v1/BTC/address" ||
        req.url ~ "^/api/v1/LTC/address" ||
        req.url ~ "^/ripple/address" ||
        req.url ~ "^/ripple/bridge/out/bitcoin")
    {
#        set beresp.http.X-Varnish-Debug-Long-Living = "true";
        set beresp.ttl = 10m;
    }

    # If a user creates an order, invalidate market stats
    if ((req.url ~ "^/api/v1/orders" && req.request == "POST") ||
        (req.url ~ "^/api/v1/spend" && req.request == "POST") ||
        (req.url ~ "^/api/v1/orders/\d+$" && req.request == "DELETE"))
    {
        ban ("req.url ~ ^/api/v1/markets/?");
        ban ("req.url ~ ^/api/bitcoincharts");
    }

    if (beresp.ttl <= 0s) {
        return (hit_for_pass);
    }

    return (deliver);
}

sub vcl_deliver {
    remove resp.http.X-Varnish;
    remove resp.http.Via;
    remove resp.http.Vary;
    remove resp.http.Server;
    remove resp.http.X-Powered-By;
    remove resp.http.Age;
/*
    if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
        set resp.http.X-Cache-Hits = obj.hits;
    } else {
        set resp.http.X-Cache = "MISS";
    }
    return(deliver);
*/
}
